name: CI

on: [push, pull_request]

jobs:
  tests:
    runs-on: ubuntu-latest
      
    strategy:
      matrix:
        php: [7.4, 7.3, 7.2]
        mysql: [5.7, 5.6, 5.5]
        database: [mysql, pgsql, sqlite, sqlsrv]
        release: [stable, lowest]
        include: 
          - php: 7.4
            release: stable 
            coverage: xdebug
        exclude:
          - database: pgsql
            mysql: 5.7
          - database: sqlite
            mysql: 5.7
          - database: sqlsrv
            mysql: 5.7
          - database: pgsql
            mysql: 5.6
          - database: sqlite
            mysql: 5.6
          - database: sqlsrv
            mysql: 5.6
          - database: pgsql
            mysql: 5.5
          - database: sqlite
            mysql: 5.5
          - database: sqlsrv
            mysql: 5.5

    services:
      mysql:
        image: mysql:${{ matrix.mysql }}
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test
        ports:
          - 3306
      pgsql:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        ports:
          - 5432/tcp

    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/.composer/cache/files
          key: php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}
      - uses: shivammathur/setup-php@v1
        with:
          php-version: ${{ matrix.php }}
          tools: pecl
          extensions: bcmath, ctype, json, mbstring, openssl, pdo, pdo_${{ matrix.database }}, tokenizer, xml
          coverage: ${{ matrix.coverage }}
      - run: |
          PHP_API=$(php -i | sed -n 's/PHP API => //p')
          SQLITE=$(wget -qO- https://github.com/staudenmeir/php-sqlite/raw/master/LATEST)
          sudo wget -q https://github.com/staudenmeir/php-sqlite/raw/master/$SQLITE/libsqlite3.so -O /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6
          sudo ln -s /usr/lib/x86_64-linux-gnu/libsqlite3.so.0.8.6 /usr/lib/x86_64-linux-gnu/libsqlite3.so
          sudo wget -q https://github.com/staudenmeir/php-sqlite/raw/master/$SQLITE/${{ matrix.php }}/pdo_sqlite.so -O /usr/lib/php/$PHP_API/pdo_sqlite.so
        if: matrix.database == 'sqlite'
      - run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/16.04/mssql-server-2017.list | sudo tee /etc/apt/sources.list.d/mssql-server-2017.list
          sudo apt-get update
          sudo apt-get install mssql-server=14.0.3192.2-2
          sudo MSSQL_SA_PASSWORD=Password! MSSQL_PID=developer /opt/mssql/bin/mssql-conf -n setup accept-eula
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install mssql-tools unixodbc-dev
          sudo /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Password! -Q "create database [test]"
        if: matrix.database == 'sqlsrv'
      - run: composer update --no-interaction --no-progress --no-suggest --prefer-dist --prefer-${{ matrix.release }}
      - run: cp tests/config/database.ci.php tests/config/database.php
      - run: |
          PHPUNIT_FLAGS=$([ "${{ matrix.coverage }}" == "xdebug" ] && echo "--coverage-clover=coverage.xml" || echo "")
          vendor/bin/phpunit $PHPUNIT_FLAGS
        env:
          DATABASE: ${{ matrix.database }}
          MYSQL_PORT: ${{ job.services.mysql.ports[3306] }}
          PGSQL_PORT: ${{ job.services.pgsql.ports[5432] }}
      - run: |
          wget -q https://scrutinizer-ci.com/ocular.phar
          php ocular.phar code-coverage:upload --format=php-clover coverage.xml
        if: matrix.coverage == 'xdebug'
